/*Sum All Numbers in a Range
We'll pass you an array of two numbers. Return the sum of those two numbers plus the sum of all the numbers between them. The lowest number will not always come first.

For example, sumAll([4,1]) should return 10 because sum of all the numbers between 1 and 4 (both inclusive) is 10.*/

function sumAll(arr) {
  return 1;
}

sumAll([1, 4]);

//SOLUTION:

function sumAll(arr) {
  let max = Math.max(arr[0], arr[1]);
  let min = Math.min(arr[0], arr[1]);
  let sumBetween = 0;
  for (let i = min; i <= max; i++) {
    sumBetween += i;
  }
  return sumBetween;
}

console.log(sumAll([1, 4]));

//ALT SOL 1:

const sumAll = arr => {
  // Buckle up everything to one!
  const startNum = arr[0];
  const endNum = arr[1];

  // Get the count of numbers between the two numbers by subtracting them and add 1 to the absolute value.
  // ex. There are |1-4| + 1 = 4, (1, 2, 3, 4), 4 numbers between 1 and 4.
  const numCount = Math.abs(startNum - endNum) + 1;

  // Using Arithmetic Progression summing formula
  const sum = ((startNum + endNum) * numCount) / 2;
  return sum;
};

//ALT SOL 2:

function sumAll(arr) {
  let sumBetween = 0;
  for (let i = Math.min(...arr); i <= Math.max(...arr); i++) {
    sumBetween += i;
  }
  return sumBetween;
}

sumAll([1, 4]);

//RECURSIVE SOLUTION:

function sumAll(arr) {
  const [first, last] = [...arr].sort((a, b) => a - b);
  return first !== last
    ? first + sumAll([first + 1, last])
    : first;
}

sumAll([1, 4]);

//--------------------------------------------------------------------------

/*Diff Two Arrays
Compare two arrays and return a new array with any items only found in one of the two given arrays, but not both. In other words, return the symmetric difference of the two arrays.

Note: You can return the array with its elements in any order.*/

function diffArray(arr1, arr2) {
  const newArr = [];
  return newArr;
}

diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);

//SOLUTION:

function diffArray(arr1, arr2) {
  const newArr = [];

  function onlyInFirst(first, second) {
    //loop through an array to find elements that don't exist in another array
    for (let i = 0; i < first.length; i++) {
      if (second.indexOf(first[i]) === -1) {
        //pushing the elements unique to first newArr
        newArr.push(first[i])
      }
    }
  }

  onlyInFirst(arr1, arr2);
  onlyInFirst(arr2, arr1);
  
  return newArr;
}

diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);

//DECLARATIVE SOLUTION:

function diffArray(arr1, arr2) {
  return arr1
    .concat(arr2)
    .filter(item => !arr1.includes(item) || !arr2.includes(item));
}

diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);

//DECLARATIVE SOLUTION 2:

function diffArray(arr1, arr2) {
  return [...diff(arr1, arr2), ...diff(arr2, arr1)];

  function diff(a, b) {
    return a.filter(item => b.indexOf(item) === -1);
  }
}

//-----------------------------------------------------------------------------

/*Seek and Destroy
You will be provided with an initial array (the first argument in the destroyer function), followed by one or more arguments. Remove all elements from the initial array that are of the same value as these arguments.

Note: You have to use the arguments object.*/

function destroyer(arr) {
  return arr;
}

destroyer([1, 2, 3, 1, 2, 3], 2, 3);

//SOLUTION:

function destroyer(arr) {
  const valsToRemove = Object.values(arguments).slice(1);
  const filteredArray = [];

  for (let i = 0; i < arr.length; i++) {
    let removeElement = false;
    for (let j = 0; j < valsToRemove.length; j++) {
      if (arr[i] === valsToRemove[j]) {
        removeElement = true;
      }
    }
    if (!removeElement) {
      filteredArray.push(arr[i]);
    }
  }
  return filteredArray;
}

destroyer([1, 2, 3, 1, 2, 3], 2, 3);

/*create an array of valsToRemove using Object.values(arguments).slice(1) and store
it in the variable valsToRemove (will check against arr)

Start a basic for loop iterate through arr, nest another for loop inside the first
changing the integer variable j and arr to valsToRemove. This second loop will
iterate through valsToRemove.
 
Within the 2nd loop create an if statement checking strictly === that the current
value of arr[i] is equal to valsToRemove[j].

If the value at the current index is equal to both arrays, let removeElement to true 
remove it from arr.

If the value is not flagged for removal, add it to the filteredArray.

Outside of the nested loops, return the filteredArray.*.

//ALT SOL 1:

function destroyer(arr) {
  /*declare valsToRemove that equals a new array object from() the arguments
  passed into the function, use slice() on the array starting from the second
  index, 1.*/
  const valsToRemove = Array.from(arguments).slice(1);
  /*return filtered array using includes() in the callback function to check if val
  is not in valsToRemove; returning true to keep the value in original array or
  false to remove it.*/
  return arr.filter(function(val) {
    return !valsToRemove.includes(val);
  });
}

//ALT SOL 2:

//using spread operator to retrieve arguments
function destroyer(arr, ...valsToRemove) {
//return the filtered array using includes()
  return arr.filter(elem => !valsToRemove.includes(elem));
}

//------------------------------------------------------------------------------

/*Wherefore art thou
Make a function that looks through an array of objects (first argument) and returns an array of all objects that have matching name and value pairs (second argument). Each name and value pair of the source object has to be present in the object from the collection if it is to be included in the returned array.

For example, if the first argument is [{ first: "Romeo", last: "Montague" }, { first: "Mercutio", last: null }, { first: "Tybalt", last: "Capulet" }], and the second argument is { last: "Capulet" }, then you must return the third object from the array (the first argument), because it contains the name and its value, that was passed on as the second argument.*/

function whatIsInAName(collection, source) {
  const arr = [];
  // Only change code below this line


  // Only change code above this line
  return arr;
}

whatIsInAName([{ first: "Romeo", last: "Montague" }, { first: "Mercutio", last: null }, { first: "Tybalt", last: "Capulet" }], { last: "Capulet" });

//SOLUTION:

function whatIsInAName(collection, source) {
  const arr = []; //This doesn't appear to be necessary to solve the problem
  // Only change code below this line
  const sourceKeys = Object.keys(source);

  return collection.filter (obj => {
    for (let i = 0; i < sourceKeys.length; i++) {
      if (!obj.hasOwnProperty(sourceKeys[i]) || 
        obj[sourceKeys[i]] !== source[sourceKeys[i]]) {
          return false;
      }
    }
    return true;
  });  
    

  // Only change code above this line
  return arr; //this also doesn't appear to be necessary to solve the problem
}

whatIsInAName([{ first: "Romeo", last: "Montague" }, { first: "Mercutio", last: null }, { first: "Tybalt", last: "Capulet" }], { last: "Capulet" });

/* filter through array using .filter()
use a for loop to loop through each item in the object
use a if statement to check if the object in the collection doesn't 
	have the key and the property value doesn't match the value in source
return false if above if statement is correct otherwise return true*/

//ALT SOL:

function whatIsInAName(collection, source) {
  // "What's in a name? that which we call a rose
  // By any other name would smell as sweet.”
  // -- by William Shakespeare, Romeo and Juliet
  const sourceKeys = Object.keys(source);

  return collection
    .filter(obj => sourceKeys
                     .every(key => obj.hasOwnProperty(key) &&
                            obj[key] === source[key]));
}

// test here
whatIsInAName(
  [
    { first: "Romeo", last: "Montague" },
    { first: "Mercutio", last: null },
    { first: "Tybalt", last: "Capulet" }
  ],
  { last: "Capulet" }
);

/*filter through collection with .filter()
return a boolean value for the .filter() method
reduce to boolean value to be returned for the .every() method*/

//ALT SOL 2:

function whatIsInAName(collection, source) {
  // "What's in a name? that which we call a rose
  // By any other name would smell as sweet.”
  // -- by William Shakespeare, Romeo and Juliet
  const souceKeys = Object.keys(source);

  // filter the collection
  return collection.filter(obj => souceKeys
      .map(key => obj.hasOwnProperty(key) && obj[key] === source[key])
      .reduce((a, b) => a && b));
}

// test here
whatIsInAName(
  [
    { first: "Romeo", last: "Montague" },
    { first: "Mercutio", last: null },
    { first: "Tybalt", last: "Capulet" }
  ],
  { last: "Capulet" }
);

/*filter through collection using Array.filter()
map through all keys and return boolean values based on the check conditions:
	both the key and it's corresponding value must exist within the object we
	are filtering through.
reduce the mapped boolean values to a single boolean that indicates whether all
	srcKeys pass the conditions checked above.
This single boolean will be used to filter through the collection.

//----------------------------------------------------------------------------